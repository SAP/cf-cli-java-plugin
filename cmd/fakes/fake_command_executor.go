/*
 * Copyright (c) 2024 SAP SE or an SAP affiliate company. All rights reserved.
 * This file is licensed under the Apache Software License, v. 2 except as noted
 * otherwise in the LICENSE file at the root of the repository.
 */

// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/SAP/cf-cli-java-plugin/cmd"
)

type FakeCommandExecutor struct {
	ExecuteStub        func(args []string) ([]string, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		args []string
	}
	executeReturns struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandExecutor) Execute(args []string) ([]string, error) {
	var argsCopy []string
	if args != nil {
		argsCopy = make([]string, len(args))
		copy(argsCopy, args)
	}
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		args []string
	}{argsCopy})
	fake.recordInvocation("Execute", []interface{}{argsCopy})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(args)
	}
	return fake.executeReturns.result1, fake.executeReturns.result2
}

func (fake *FakeCommandExecutor) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeCommandExecutor) ExecuteArgsForCall(i int) []string {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].args
}

func (fake *FakeCommandExecutor) ExecuteReturns(result1 []string, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCommandExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.CommandExecutor = new(FakeCommandExecutor)

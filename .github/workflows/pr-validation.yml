name: Pull Request Validation

on:
  pull_request:
    branches:
      - main
      - master

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23.5"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js for markdownlint
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Go dependencies
        run: go mod tidy -e || true

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Lint Go code
        run: ./scripts/lint-go.sh ci

      - name: Check Python test suite
        id: check-python
        run: |
          if [ -f "test/requirements.txt" ] && [ -f "test/setup.sh" ]; then
            echo "python_tests_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Python test suite found"
          else
            echo "python_tests_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Python test suite not found - skipping Python validation"
          fi

      - name: Setup Python environment
        if: steps.check-python.outputs.python_tests_exist == 'true'
        run: |
          cd test
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Validate Python code quality
        if: steps.check-python.outputs.python_tests_exist == 'true'
        run: ./scripts/lint-python.sh ci

      - name: Lint Markdown files
        run: ./scripts/lint-markdown.sh ci

      # TODO: Re-enable Python tests when ready
      # - name: Run Python tests
      #   if: steps.check-python.outputs.python_tests_exist == 'true'
      #   run: |
      #     cd test
      #     source venv/bin/activate
      #     echo "üß™ Running Python tests..."
      #     if ! pytest -v --tb=short; then
      #       echo "‚ùå Python tests failed."
      #       exit 1
      #     fi
      #     echo "‚úÖ Python tests passed!"
      #   env:
      #     CF_API: ${{ secrets.CF_API }}
      #     CF_USERNAME: ${{ secrets.CF_USERNAME }}
      #     CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
      #     CF_ORG: ${{ secrets.CF_ORG }}
      #     CF_SPACE: ${{ secrets.CF_SPACE }}

      - name: Build plugin
        run: |
          echo "üî® Building plugin..."
          if ! python3 .github/workflows/build.py; then
            echo "‚ùå Build failed."
            exit 1
          fi
          echo "‚úÖ Build successful!"

      - name: Validation Summary
        run: |
          echo ""
          echo "üéâ Pull Request Validation Summary"
          echo "=================================="
          echo "‚úÖ Go code formatting and linting"
          echo "‚úÖ Go tests"
          echo "‚úÖ Markdown formatting and linting"
          if [ "${{ steps.check-python.outputs.python_tests_exist }}" == "true" ]; then
            echo "‚úÖ Python code quality checks"
            echo "‚úÖ Python tests"
          else
            echo "‚ö†Ô∏è  Python tests skipped (not found)"
          fi
          echo "‚úÖ Plugin build"
          echo ""
          echo "üöÄ Ready for merge!"
